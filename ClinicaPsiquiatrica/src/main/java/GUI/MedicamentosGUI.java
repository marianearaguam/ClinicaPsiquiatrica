/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import ConexaoBD.Conexao;
import DAO.MedicamentoDAO;
import DTO.MedicamentoDTO;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author carlo
 */
public class MedicamentosGUI extends javax.swing.JFrame {
private MedicamentoDAO MedicamentoDAO = new MedicamentoDAO();
private Conexao conexao = new Conexao();

private int idMedicamentoSelecionado = -1;  // Vari√°vel global para armazenar o ID
    /**
     * Creates new form MedicamentosGUI
     */
    public MedicamentosGUI() {
        initComponents();
        listarMedicamentos();

    }
private void inicializarTabela() {
    // A tabela j√° foi criada pelo GUI, n√£o √© necess√°rio criar uma nova inst√¢ncia
    DefaultTableModel model = new DefaultTableModel(
        new Object[][]{}, 
        new String[]{"ID", "Nome", "Descricao", "Quantidade", "Preco", "Fornecedor", "Data de Validade"}
    );
    tableMedicamentos.setModel(model); // Associa o modelo √† tabela existente

    // Definindo o modo de sele√ß√£o
    tableMedicamentos.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    
    // Adicionando o listener para capturar a sele√ß√£o da tabela
    ListSelectionModel selectionModel = tableMedicamentos.getSelectionModel();
    selectionModel.addListSelectionListener(new ListSelectionListener() {
        @Override
        public void valueChanged(ListSelectionEvent e) {
            // Verifica se a sele√ß√£o √© v√°lida (n√£o est√° vazio)
            if (!e.getValueIsAdjusting() && tableMedicamentos.getSelectedRow() != -1) {
                carregarCamposMedicamento(); // Atualiza os campos ao selecionar uma linha
            }
        }
    });
}
public boolean executarComandoSQL(String sql, Object... parametros) {
    Connection con = null;
    PreparedStatement pst = null;

    try {
        con = new Conexao().getConnection();
        pst = con.prepareStatement(sql);

        // Definir os par√¢metros dinamicamente
        for (int i = 0; i < parametros.length; i++) {
            pst.setObject(i + 1, parametros[i]);
            System.out.println("Par√¢metro [" + (i + 1) + "]: " + parametros[i]);  // üî• Debug
        }

        int linhasAfetadas = pst.executeUpdate();
        System.out.println("Linhas afetadas: " + linhasAfetadas);  // üî• Debug

        return linhasAfetadas > 0;
    } catch (SQLException e) {
        System.err.println("Erro ao executar SQL: " + e.getMessage());
        return false;
    } finally {
        try {
            if (pst != null) pst.close();
            if (con != null) con.close();
        } catch (SQLException e) {
            System.err.println("Erro ao fechar conex√£o: " + e.getMessage());
        }
    }
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        Nometxt = new javax.swing.JLabel();
        Descricaotxt = new javax.swing.JLabel();
        QuantidadeEstoquetxt = new javax.swing.JLabel();
        Precotxt = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        txtDescricao = new javax.swing.JTextField();
        txtQuantidadeEstoque = new javax.swing.JTextField();
        txtPreco = new javax.swing.JTextField();
        txtFornecedor = new javax.swing.JTextField();
        Fornecedortxt = new javax.swing.JLabel();
        txtDataValidade = new javax.swing.JTextField();
        DataValidadetxt = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableMedicamentos = new javax.swing.JTable();
        buttonAtualizar = new javax.swing.JButton();
        buttonCadastrar = new javax.swing.JButton();
        buttonExcluir = new javax.swing.JButton();
        buttonCarregarCampos = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 255, 153));

        jLabel1.setBackground(new java.awt.Color(0, 102, 51));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 51));
        jLabel1.setText("Medicamentos");

        Nometxt.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        Nometxt.setText("Nome:");

        Descricaotxt.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        Descricaotxt.setText("Descri√ß√£o:");

        QuantidadeEstoquetxt.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        QuantidadeEstoquetxt.setText("Quantidade:");

        Precotxt.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        Precotxt.setText("Pre√ßo:");

        Fornecedortxt.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        Fornecedortxt.setText("Fornecedor:");

        DataValidadetxt.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        DataValidadetxt.setText("Data de Validade:");

        tableMedicamentos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableMedicamentos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableMedicamentos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMedicamentosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableMedicamentos);

        buttonAtualizar.setText("Atualizar");
        buttonAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAtualizarActionPerformed(evt);
            }
        });

        buttonCadastrar.setText("Cadastrar");
        buttonCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCadastrarActionPerformed(evt);
            }
        });

        buttonExcluir.setText("Excluir");
        buttonExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExcluirActionPerformed(evt);
            }
        });

        buttonCarregarCampos.setText("Carregar Campos");
        buttonCarregarCampos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCarregarCamposActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(200, 200, 200))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(98, 98, 98)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Descricaotxt)
                            .addComponent(Nometxt)
                            .addComponent(QuantidadeEstoquetxt)
                            .addComponent(Precotxt)
                            .addComponent(Fornecedortxt)
                            .addComponent(DataValidadetxt))
                        .addGap(28, 28, 28)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtQuantidadeEstoque, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPreco, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDataValidade, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(buttonCadastrar)
                                .addGap(26, 26, 26)
                                .addComponent(buttonAtualizar)
                                .addGap(26, 26, 26)
                                .addComponent(buttonExcluir)
                                .addGap(31, 31, 31)
                                .addComponent(buttonCarregarCampos))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 594, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(70, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel1)
                .addGap(57, 57, 57)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Nometxt)
                    .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Descricaotxt))
                .addGap(41, 41, 41)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtQuantidadeEstoque, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(QuantidadeEstoquetxt))
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPreco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Precotxt))
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Fornecedortxt))
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DataValidadetxt)
                    .addComponent(txtDataValidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonCadastrar)
                    .addComponent(buttonAtualizar)
                    .addComponent(buttonExcluir)
                    .addComponent(buttonCarregarCampos))
                .addContainerGap(270, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCadastrarActionPerformed
        cadastrarMedicamento();
    }//GEN-LAST:event_buttonCadastrarActionPerformed

    private void buttonAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAtualizarActionPerformed
    try {
        atualizarMedicamento();
    } catch (SQLException ex) {
        Logger.getLogger(MedicamentosGUI.class.getName()).log(Level.SEVERE, null, ex);
    }
      listarMedicamentos();
      carregarCamposMedicamento();
    }//GEN-LAST:event_buttonAtualizarActionPerformed

    private void buttonExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExcluirActionPerformed
        excluirMedicamento();
       listarMedicamentos();
       limparCamposMedicamento();
    }//GEN-LAST:event_buttonExcluirActionPerformed

    private void buttonCarregarCamposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCarregarCamposActionPerformed
        carregarCamposMedicamento();
    }//GEN-LAST:event_buttonCarregarCamposActionPerformed

    private void tableMedicamentosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMedicamentosMouseClicked
         int selectedRow = tableMedicamentos.getSelectedRow();
    System.out.println("üìå Linha clicada: " + selectedRow);

    if (selectedRow != -1) {
        txtNome.setText(tableMedicamentos.getValueAt(selectedRow, 1).toString());
        txtDescricao.setText(tableMedicamentos.getValueAt(selectedRow, 2).toString());
        txtQuantidadeEstoque.setText(tableMedicamentos.getValueAt(selectedRow, 3).toString());
        txtPreco.setText(tableMedicamentos.getValueAt(selectedRow, 4).toString());
        txtFornecedor.setText(tableMedicamentos.getValueAt(selectedRow, 5).toString());
        txtDataValidade.setText(tableMedicamentos.getValueAt(selectedRow, 6).toString());
        

        System.out.println("üìå Medicamento carregado: " + txtNome.getText());
    }
    }//GEN-LAST:event_tableMedicamentosMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MedicamentosGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MedicamentosGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MedicamentosGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MedicamentosGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MedicamentosGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel DataValidadetxt;
    private javax.swing.JLabel Descricaotxt;
    private javax.swing.JLabel Fornecedortxt;
    private javax.swing.JLabel Nometxt;
    private javax.swing.JLabel Precotxt;
    private javax.swing.JLabel QuantidadeEstoquetxt;
    private javax.swing.JButton buttonAtualizar;
    private javax.swing.JButton buttonCadastrar;
    private javax.swing.JButton buttonCarregarCampos;
    private javax.swing.JButton buttonExcluir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableMedicamentos;
    private javax.swing.JTextField txtDataValidade;
    private javax.swing.JTextField txtDescricao;
    private javax.swing.JTextField txtFornecedor;
    private javax.swing.JTextField txtNome;
    private javax.swing.JTextField txtPreco;
    private javax.swing.JTextField txtQuantidadeEstoque;
    // End of variables declaration//GEN-END:variables
private static final String URL = "jdbc:mysql://127.0.0.1:3306/clinicapsiqui";
private static final String USUARIO = "root"; // Substitua pelo seu usu√°rio do MySQL
private static final String SENHA = "9T@ffy2008"; // Substitua pela sua senha do MySQL

    private void cadastrarMedicamento() {
    System.out.println("‚úÖ M√©todo cadastrarMedicamento() foi chamado!");
    // Capturando os dados do formul√°rio
    String nome = txtNome.getText();
    String descricao = txtDescricao.getText().trim();
    String quantidade = txtQuantidadeEstoque.getText().trim();
    String preco = txtPreco.getText().trim();
    String fornecedor = txtFornecedor.getText().trim();
    String dataValidade = txtDataValidade.getText().trim();

    if (preco.isEmpty() || fornecedor.isEmpty() || quantidade.isEmpty()) {
        JOptionPane.showMessageDialog(null, "‚ùå Preencha todos os campos obrigat√≥rios!", "Erro", JOptionPane.ERROR_MESSAGE);
        System.out.println("‚ùå ERRO: Algum campo obrigat√≥rio est√° vazio!");
        return;
    }

    try {
        // Criando o objeto MedicamentoDTO
        MedicamentoDTO novoMedicamento = new MedicamentoDTO(0, nome, descricao, quantidade, preco, fornecedor, dataValidade);
        
        System.out.println("Dados capturados do formulario: " + novoMedicamento.toString());

        // Conectando ao banco e inserindo o medicamento
        String query = "INSERT INTO medicamentos (nome, descricao, quantidade, preco, fornecedor, dataValidade) VALUES (?, ?, ?, ?, ?, ?)";
        try (Connection conn = DriverManager.getConnection(URL,USUARIO,SENHA);
             PreparedStatement pst = conn.prepareStatement(query)) {

            pst.setString(1, nome);
            pst.setString(2, descricao);
            pst.setString(3, quantidade);
            pst.setString(4, preco);
            pst.setString(5, fornecedor);
            pst.setString(6, dataValidade);

            pst.executeUpdate();  // Executa a inser√ß√£o

            JOptionPane.showMessageDialog(null, "Medicamento cadastrado com sucesso.");
            listarMedicamentos(); // Atualiza a tabela
            limparCamposMedicamento();
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Erro ao cadastrar medicamento: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
    }
}
private void atualizarMedicamento() throws SQLException {
    int selectedRow = tableMedicamentos.getSelectedRow(); // üîπ Obt√©m a linha selecionada
    System.out.println("üìå Tentando atualizar... Linha selecionada: " + selectedRow);

    if (selectedRow == -1) {  // Se nenhuma linha estiver selecionada, exibe erro
        JOptionPane.showMessageDialog(null, "‚ùå Nenhum medicamento foi selecionado!", "Erro", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Obt√©m o ID do Medicamento selecionado
    int idMedicamentoSelecionado = (int) tableMedicamentos.getValueAt(selectedRow, 0);
    System.out.println("üìå ID do medicamento selecionado: " + idMedicamentoSelecionado);

    if (idMedicamentoSelecionado <= 0) {
        JOptionPane.showMessageDialog(null, "ID do medicamento inv√°lido.", "Erro", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Obt√©m os dados dos campos
    String nome = txtNome.getText();
    String descricao = txtDescricao.getText();
    String quantidade = txtQuantidadeEstoque.getText();
    String preco = txtPreco.getText();
    String fornecedor = txtFornecedor.getText();
    String dataValidade = txtDataValidade.getText();
    

    if (nome.isEmpty() || preco.isEmpty() || fornecedor.isEmpty() || quantidade.isEmpty() || descricao.isEmpty() || dataValidade.isEmpty()) {
        JOptionPane.showMessageDialog(null, "‚ùå Preencha todos os campos!", "Erro", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // SQL para atualizar o Medicamento
    String query = "UPDATE medicamentos SET nome = ?, descricao = ?, quantidade = ?, preco = ?, fornecedor = ?, dataValidade = ? WHERE idMedicamento = ?";

    boolean sucesso = conexao.executarComandoSQL(query, nome, descricao, quantidade, fornecedor, preco, dataValidade, idMedicamentoSelecionado);

    if (sucesso) {
        JOptionPane.showMessageDialog(null, "‚úÖ Medicamento atualizado com sucesso.");
        listarMedicamentos();  // Atualiza a tabela
    } else {
        JOptionPane.showMessageDialog(null, "‚ùå Erro ao atualizar o medicamento.", "Erro", JOptionPane.ERROR_MESSAGE);
    }
}


private void excluirMedicamento() {
    
    if (idMedicamentoSelecionado == -1) {  // Verifica se um medicamento foi selecionado
        JOptionPane.showMessageDialog(null, "Selecione um medicamento para excluir.", "Erro", JOptionPane.ERROR_MESSAGE);
        return;
    }

    System.out.println("ID do medicamento a excluir: " + idMedicamentoSelecionado);  // üî• Debug
    System.out.println("Tentando excluir o ID: " + idMedicamentoSelecionado);

    String query = "DELETE FROM medicamentos WHERE idMedicamento = ?";

    // Chama o m√©todo do ConexaoDAO para executar a exclus√£o
    boolean sucesso = conexao.executarComandoSQL(query, idMedicamentoSelecionado);

    if (sucesso) {
        JOptionPane.showMessageDialog(null, "Medicamento exclu√≠do com sucesso.");
        listarMedicamentos();  // Atualiza a lista de pacientes
        idMedicamentoSelecionado = -1;  // Reseta o ID para evitar exclus√µes acidentais
    } else {
        JOptionPane.showMessageDialog(null, "Erro ao excluir o medicamento.", "Erro", JOptionPane.ERROR_MESSAGE);
    }
}


private void listarMedicamentos() {
    try {
        
        String query = "SELECT * FROM medicamentos"; 

        try (Connection conn = DriverManager.getConnection(URL, USUARIO, SENHA);
             PreparedStatement pst = conn.prepareStatement(query);
             ResultSet rs = pst.executeQuery()) {

            DefaultTableModel model = (DefaultTableModel) tableMedicamentos.getModel();
            model.setNumRows(0); // Limpa a tabela antes de adicionar novos dados

            while (rs.next()) {
                Object[] rowData = {
                    rs.getInt("idMedicamento"),
                    rs.getString("nome"),
                    rs.getString("descricao"),
                    rs.getString("quantidade"),
                    rs.getString("preco"),
                    rs.getString("fornecedor"),
                    rs.getString("dataValidade"),
                };
                model.addRow(rowData);
            }
            model.fireTableDataChanged();
            tableMedicamentos.repaint(); // Atualiza a tabela
            tableMedicamentos.revalidate();
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Erro ao carregar os medicamentos: " + e.getMessage());
    }
}
private void carregarCamposMedicamento() {
    int selectedRow = tableMedicamentos.getSelectedRow();
    if (selectedRow != -1) {
        idMedicamentoSelecionado = (int) tableMedicamentos.getValueAt(selectedRow, 0); // ID na primeira coluna
        System.out.println("ID do medicamento armazenado: " + idMedicamentoSelecionado);  // üî• Debug

        txtNome.setText(tableMedicamentos.getValueAt(selectedRow, 1).toString());
        txtDescricao.setText(tableMedicamentos.getValueAt(selectedRow, 2).toString());
        txtQuantidadeEstoque.setText(tableMedicamentos.getValueAt(selectedRow, 3).toString());
        txtPreco.setText(tableMedicamentos.getValueAt(selectedRow, 4).toString());
        txtFornecedor.setText(tableMedicamentos.getValueAt(selectedRow, 5).toString());
        txtDataValidade.setText(tableMedicamentos.getValueAt(selectedRow, 6).toString());
    } else {
        System.out.println("Nenhum medicamento selecionado.");
    }
}

private void limparCamposMedicamento() {
    txtNome.setText(null);
    txtDescricao.setText(null);
    txtQuantidadeEstoque.setText(null);
    txtPreco.setText(null);
    txtFornecedor.setText(null);
    txtDataValidade.setText(null);
}
}
